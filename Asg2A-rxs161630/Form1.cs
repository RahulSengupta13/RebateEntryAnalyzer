/*===============================================================================================
 |
 |   Assignment:  CS6326 Assignment 2
 |       Author:  Rahul Sengupta 
 |       Net-ID:  rxs161630
 |     Language:  C#
 |        Class:  Human Computer Interaction
 |   Instructor:  John Cole
 |     Due Date:  15/10/16
 |
 +-----------------------------------------------------------------------------------------------
 |
 |  Description:  • An application to analyze the record file generated by the Rebate Entry Program.
 |                • All UI related tasks are carried out on Form.cs
 |                • All utilities are carried out by FileManager.cs
 |                • TimeModel.cs is used as a model to return analyzed values
 |
 |        Input:  The record file generated by the Rebate Entry program.
 |
 |       Output:  • An analysis of the record file on the screen, and an option to save it on disk.
 |                • The name of the output file is of the format -
 |                      "Rebate Entry Analyzed - Date and Time of Analysis.txt"
 |                  to prevent overwriting analysis of different versions of input record file.
 |
 |    Algorithm:  -
 |   Known Bugs:  -
 |   Required Features Not Included:  -
 |
 ==============================================================================================*/
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Asg2A_rxs161630
{
    public partial class Form1 : Form
    {
        string FilePath;
        TimeModel model;
        public Form1()
        {
            InitializeComponent();
            txt_path.ReadOnly = true;
            btn_analyse.Enabled = false;
            btn_save.Enabled = false;
        }

        private void btn_browse_Click(object sender, EventArgs e)
        {
            //Creating an open file dialog for choosing the input file
            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            openFileDialog1.Filter = "Report File|*.txt";
            openFileDialog1.Title = "Select a Report File to Analyze";
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                FilePath = openFileDialog1.FileName;
                browsed(FilePath);
                btn_save.Enabled = false;
            }
        }
        
        private void btn_analyse_Click(object sender, EventArgs e)
        {
            //Analyze the file chosen via browse
            if (FilePath != null)
            {
                FileStream rebateEntry = new FileStream(FilePath, FileMode.Open);
                model = FileManager.doOperations(rebateEntry);
                if (model == null)
                {
                    MessageBox.Show("Invalid Record File selected!","Error");
                    clearControls();
                    rebateEntry.Close();
                    return;
                }
                else
                {
                    setValues(model);
                    btn_save.Enabled = true;
                    btn_save.Focus();
                }
            }
        }

        //Show the values of the analysis
        private void setValues(TimeModel model)
        {
            txt_path.Text = model.filePath;
            toolStripStatusLabel1.ForeColor = Color.SeaGreen;
            toolStrip_status.Text = "Record File Analyzed!";
            toolStrip_time.Text = "Time last Analyzed: " + model.timeOfAnalysis.ToLongTimeString();
            listview_results.Items.Clear();
            ListViewItem lvi_noOfRecords= new ListViewItem(" ");
            lvi_noOfRecords.SubItems.Add("Number of Records Analyzed");
            lvi_noOfRecords.SubItems.Add(model.totalNumberOfRecords+"");
            listview_results.Items.Add(lvi_noOfRecords);
            ListViewItem lvi_MinEntry = new ListViewItem(" ");
            lvi_MinEntry.SubItems.Add("Minimum Entry Time of Record");
            lvi_MinEntry.SubItems.Add(model.minTimeEntry);
            lvi_MinEntry.BackColor = Color.AliceBlue;
            listview_results.Items.Add(lvi_MinEntry);
            ListViewItem lvi_MaxEntry = new ListViewItem(" ");
            lvi_MaxEntry.SubItems.Add("Maximum Entry Time of Record");
            lvi_MaxEntry.SubItems.Add(model.maxTimeEntry);
            listview_results.Items.Add(lvi_MaxEntry);
            ListViewItem lvi_MinIdle = new ListViewItem(" ");
            lvi_MinIdle.SubItems.Add("Minimum Time b/w Records");
            lvi_MinIdle.SubItems.Add(model.minIdle);
            lvi_MinIdle.BackColor = Color.AliceBlue;
            listview_results.Items.Add(lvi_MinIdle);
            ListViewItem lvi_MaxIdle = new ListViewItem(" ");
            lvi_MaxIdle.SubItems.Add("Maximum Time b/w Records");
            lvi_MaxIdle.SubItems.Add(model.maxIdle);
            listview_results.Items.Add(lvi_MaxIdle);
            ListViewItem lvi_AvgEntry = new ListViewItem(" ");
            lvi_AvgEntry.SubItems.Add("Average Entry Time of Record");
            lvi_AvgEntry.SubItems.Add(model.avgTimeEntry);
            lvi_AvgEntry.BackColor = Color.AliceBlue;
            listview_results.Items.Add(lvi_AvgEntry);
            ListViewItem lvi_AvgIdle = new ListViewItem(" ");
            lvi_AvgIdle.SubItems.Add("Average Waiting b/w Entering Records");
            lvi_AvgIdle.SubItems.Add(model.avgIdle);
            listview_results.Items.Add(lvi_AvgIdle);
            ListViewItem lvi_difFirstLast = new ListViewItem(" ");
            lvi_difFirstLast.SubItems.Add("Time from First to Last Entry");
            lvi_difFirstLast.SubItems.Add(model.difFirstLast);
            lvi_difFirstLast.BackColor = Color.AliceBlue;
            listview_results.Items.Add(lvi_difFirstLast);
        }

        //HouseKeeping on Form Load
        private void Form1_Load(object sender, EventArgs e)
        {
            listview_results.HeaderStyle = System.Windows.Forms.ColumnHeaderStyle.None;

            //User Helper Text
            text_info.Text = "This program is meant to analyze the Record File created by the Rebate Entry program.";
            text_info.AppendText(Environment.NewLine);
            text_info.AppendText("*Instructions");
            text_info.AppendText(Environment.NewLine);
            text_info.AppendText("1. On exectuing the program, it looks for \"CS6326Asg2.txt\" [Output of the Rebate Entry Program] in the same folder. If it finds the record file, it opens with an option to analyze it directly.");
            text_info.AppendText(Environment.NewLine);
            text_info.AppendText("2. If file is not present in the folder, click \"Browse\" and browse the Record file. Click \"Analyze\" to see the results in the white display panel.");
            text_info.AppendText(Environment.NewLine);
            text_info.AppendText("3. On successful analysis of the Record File, the \"Save to File\" button will become active, which will save the analysis to a text file in the same directory.");

            //Automate choosing of input file if present
            if (File.Exists("CS6326Asg2.txt"))
            {
                FilePath = Path.GetFullPath("CS6326Asg2.txt");
                browsed(FilePath);
            }
            else
            {
                toolStrip_status.Text = "Couldn't find record file, please use Browse.";
                btn_browse.Select();
            }
        }

        //Update UI on Browse
        private void browsed(String FilePath)
        {
            txt_path.Text = FilePath;
            txt_path.SelectionStart = txt_path.Text.Length;
            txt_path.ScrollToCaret();
            btn_analyse.Enabled = true;
            btn_analyse.Select();
            listview_results.Items.Clear();
            toolStripStatusLabel1.ForeColor = Color.Yellow;
            toolStrip_status.Text = "Record File Selected. Click Analyze!";
            FileInfo fi = new FileInfo(FilePath);
            toolStripStatusLabel2.Text = "Record File Size: " + fi.Length +" Bytes     Last Modified: " + fi.LastWriteTime.ToShortDateString() +" "+ fi.LastWriteTime.ToLongTimeString();
        }

        //Save the analysis to a file
        private void btn_save_Click(object sender, EventArgs e)
        {
            String FileName = "Rebate Entry Analyzed - " + model.timeOfAnalysis.ToString("yyyy-MM-dd HH-mm-ss") + ".txt";
            FileManager.saveAnalysis(FileName, model);
            toolStripStatusLabel1.ForeColor = Color.Blue;
            toolStrip_status.Text = "Analysis Saved to File!";
            btn_save.Enabled = false;
            btn_browse.Focus();
        }

        //HouseKeeping
        private void clearControls()
        {
            btn_analyse.Enabled = false;
            btn_save.Enabled = false;
            btn_browse.Focus();
            txt_path.Text = "";
            toolStripStatusLabel1.ForeColor = Color.OrangeRed;
            toolStrip_status.Text = "Ready to Analyze";
            toolStripStatusLabel2.Text = "";
        }
    }
}
